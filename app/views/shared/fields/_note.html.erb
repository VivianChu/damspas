<%
  # make sure locals are defined
  type = nil unless local_assigns[:type]
  include_label = [] unless local_assigns[:include_label]
  exclude_type = [] unless local_assigns[:exclude_type]
  exclude_label = [] unless local_assigns[:exclude_label]

  if defined?(componentIndex) # Then we're working with a component
    prefix = "component_#{componentIndex}_"
    htmlOpenTemp = "<tr><td>%s </td><td>"
    htmlClose = "</td></tr>"
  else # We're working with an object or collection
    prefix = ''
    htmlOpenTemp = "<dt>%s </dt><dd>"
    htmlClose = "</dd>"
  end

  # parse notes
  notes = Hash.new
  notes.compare_by_identity
  
  # Temporary fix the bug that note field not displaying at component level. 
  # The solr index will need to be updated to make it consistent.
  if defined?(componentIndex)
    data = @document["#{prefix}note_json_tesim"]
  else
    data = @document["otherNote_json_tesim"]
  end

  if data != nil
    data.each do |n|
      note = JSON.parse(n)
      note_type = note['type']
      note_label = note['displayLabel']
      # add notes[displaylabel] if exist, if not note[type] else put as general note
      # add notes if type/label match specification
      if ( type == nil || type == note_type ) &&
        ( include_label == [] || include_label.include?(note_label) ) &&
        ( exclude_type == [] || !exclude_type.include?(note_type) ) &&
        ( exclude_label == [] || !exclude_label.include?(note_label) )
        if note_label != nil && !note_label.blank?
          notes[note_label.titleize] = note
        elsif note_type != nil && !note_type.blank?
          notes[note_type.titleize] = note
        else
          notes['General Note'] = note
        end
      end
    end
  end

  #group notes by displaylabel/type
  notes = notes.group_by {|word| word[0] }
  #notes is now a hash where key => {key => value}

  if !notes.empty?
    # if type is specified, bundle all matching notes under type header
    if type != nil
      htmlOpen = htmlOpenTemp
      htmlOpen %= type.to_s.capitalize
      concat htmlOpen.html_safe
    end
    notes.each do |key, noteList| 
      # if no type is provided, use types from note json
      if type == nil
        htmlOpen = htmlOpenTemp
        htmlOpen %= key
        concat htmlOpen.html_safe
      end
      noteList.each do |k, note|
      %>
      <p>
        <% if type == 'identifier' && !note['displayLabel'].blank? %>
          <span class='dams-note-display-label'><%= note['displayLabel'].titleize %></span>: 
        <% end %>
        <%= auto_link(note['value'].gsub('""', '"').gsub("\n","<br/>"))%>
      </p>
      <%
      end
    end
    concat htmlClose.html_safe
  end
%>
